package Presentacion;

import ExceptionConsulta.ConsultaException;
import FachadaConsultarPedido.FachadaConsulta;
import InterfaceConsultarPedido.IConsultaPedido;
import InterfaceInicioSesion.IInicioSesion;
import InterfaceRealizarPedido.IPedido;
import com.mycompany.dto.PedidoDTO;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Valeria
 */
public class ConsultarPorFiltro extends javax.swing.JFrame {

    private IConsultaPedido consultaPedido;
    private PedidoDTO pedidoDTO;
    private IPedido pedido;
    private IInicioSesion inicioSesion;

    public ConsultarPorFiltro() {
        this.consultaPedido = new FachadaConsulta(); // Inicialización correcta
        initComponents();
        setSize(800, 450);
        setResizable(false);
        this.setLocationRelativeTo(this);
        cargarPedidosDelDia();
//        cargarTodosLosPedidos();
        cargarTodosLosPedidos();
        agregarDocumentListeners();
        // agregarListenerBuscarPorFecha();
    }

    public void setConsultaPedido(IConsultaPedido consultaPedido) {
        this.consultaPedido = consultaPedido;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaBusqueda = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaPedidosDia = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        buscarPorNumeroTelefofono = new javax.swing.JTextField();
        buscarPorFecha = new javax.swing.JTextField();
        buscarPorEstado = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        volver = new javax.swing.JButton();
        seleccionDePedido = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Buscar pedido");
        setMinimumSize(new java.awt.Dimension(800, 450));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(247, 239, 255));
        jPanel1.setMinimumSize(new java.awt.Dimension(800, 450));
        jPanel1.setPreferredSize(new java.awt.Dimension(800, 450));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 0, 102));
        jLabel1.setText("Resultados de búesqueda");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 180, -1, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 0, 102));
        jLabel2.setText("Consulta de ");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 40, -1, -1));

        tablaBusqueda.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Id", "Num. Telefono", "Fecha", "Total", "Estado"
            }
        ));
        jScrollPane1.setViewportView(tablaBusqueda);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 210, -1, 190));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 0, 102));
        jLabel3.setText("pedidos");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 80, -1, -1));

        tablaPedidosDia.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Id", "Num. Teléfono", "Fecha", "Total", "Estado"
            }
        ));
        tablaPedidosDia.setToolTipText("");
        jScrollPane2.setViewportView(tablaPedidosDia);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 60, -1, 110));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(102, 0, 102));
        jLabel4.setText("Buscar por:");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 210, -1, -1));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel5.setText("Teléfono");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 290, 80, 30));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel6.setText("Estado");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 330, 70, 30));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel7.setText("Fecha: ");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 250, 70, 30));

        buscarPorNumeroTelefofono.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        buscarPorNumeroTelefofono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarPorNumeroTelefofonoActionPerformed(evt);
            }
        });
        jPanel1.add(buscarPorNumeroTelefofono, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 290, 150, 30));

        buscarPorFecha.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        buscarPorFecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarPorFechaActionPerformed(evt);
            }
        });
        jPanel1.add(buscarPorFecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 250, 150, 30));

        buscarPorEstado.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        buscarPorEstado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pendiente", "Entregado", "Cancelado" }));
        buscarPorEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarPorEstadoActionPerformed(evt);
            }
        });
        jPanel1.add(buscarPorEstado, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 330, 150, 30));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(102, 0, 102));
        jLabel8.setText("Pedidos del día");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 30, -1, -1));

        volver.setBackground(new java.awt.Color(204, 0, 153));
        volver.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        volver.setForeground(new java.awt.Color(255, 255, 255));
        volver.setText("Volver");
        volver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverActionPerformed(evt);
            }
        });
        jPanel1.add(volver, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 70, 20));

        seleccionDePedido.setBackground(new java.awt.Color(153, 0, 153));
        seleccionDePedido.setForeground(new java.awt.Color(255, 255, 255));
        seleccionDePedido.setText("Seleccionar");
        seleccionDePedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionDePedidoActionPerformed(evt);
            }
        });
        jPanel1.add(seleccionDePedido, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 180, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 450));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Este metodo es para llenar la tabla de los pedidos realizados para el día
     * en curso.
     */
    private void cargarPedidosDelDia() {
        try {
            var pedidosDelDia = consultaPedido.obtenerPedidosDelDia();
            if (pedidosDelDia.isEmpty()) {
                throw new ConsultaException("No hay pedidos para el día de hoy.");
            }
            DefaultTableModel model = (DefaultTableModel) tablaPedidosDia.getModel();
            model.setRowCount(0); // Limpiar la tabla

            for (PedidoDTO pedido : pedidosDelDia) {
                model.addRow(new Object[]{pedido.getPedidoid(), pedido.getClienteId(), pedido.getFechaPedido(), pedido.getPrecioTotal(), pedido.getEstado()});
            }
        } catch (ConsultaException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Información", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al cargar pedidos del día.", "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace(); // Imprime el stack trace completo para depuración
        }
    }

    /**
     * Este metodo es para llenar la tabla de todos los pedidos realizados..
     */
    private void cargarTodosLosPedidos() {
        try {
            List<PedidoDTO> todosLosPedidos = consultaPedido.obtenerPedidos();
            DefaultTableModel model = (DefaultTableModel) tablaBusqueda.getModel();
            model.setRowCount(0); // Limpiar la tabla

            for (PedidoDTO pedido : todosLosPedidos) {
                model.addRow(new Object[]{pedido.getPedidoid(), pedido.getClienteId(), pedido.getFechaPedido(), pedido.getPrecioTotal(), pedido.getEstado()});
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al cargar todos los pedidos.", "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    /**
     * Es para que al ir escribiendo o seleccionar por lo que deseas buscar,
     * aparescan los pedidos.
     */
    private void agregarDocumentListeners() {
        buscarPorNumeroTelefofono.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                buscarPorFiltro();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                buscarPorFiltro();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                // No se usa para JTextField
            }
        });

        buscarPorFecha.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                buscarPorFiltro();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                buscarPorFiltro();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                // No se usa para JTextField
            }
        });

        buscarPorEstado.addActionListener(e -> buscarPorFiltro());
    }

    /**
     * Este metodo es para la busqueda de pedidos por filtro.
     */
    private void buscarPorFiltro() {
        String telefonoIngresado = buscarPorNumeroTelefofono.getText().trim();
        String textoFecha = buscarPorFecha.getText().trim();
        String estadoSeleccionado = (String) buscarPorEstado.getSelectedItem();

        try {
            Date fechaSeleccionada = null;
            if (!textoFecha.isEmpty() && textoFecha.length() == 10) { // Asegúrate de que el texto tiene el formato completo de la fecha
                SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
                dateFormat.setLenient(false);
                fechaSeleccionada = dateFormat.parse(textoFecha);
            }

            List<PedidoDTO> pedidosFiltrados = consultaPedido.consultarPedidosPorFiltro(
                    telefonoIngresado.isEmpty() ? null : telefonoIngresado,
                    fechaSeleccionada == null ? null : new java.sql.Date(fechaSeleccionada.getTime()),
                    estadoSeleccionado.equals("Todos") ? null : estadoSeleccionado
            );

            DefaultTableModel model = (DefaultTableModel) tablaBusqueda.getModel();
            model.setRowCount(0); // Limpiar la tabla

            if (pedidosFiltrados.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No se encontraron pedidos con los criterios especificados.", "Información", JOptionPane.INFORMATION_MESSAGE);
            } else {
                for (PedidoDTO pedido : pedidosFiltrados) {
                    model.addRow(new Object[]{pedido.getPedidoid(), pedido.getClienteId(), pedido.getFechaPedido(), pedido.getPrecioTotal(), pedido.getEstado()});
                }
            }
        } catch (ParseException ex) {
            // No hacer nada cuando el formato no es correcto aún
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error al buscar por filtro.", "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }

    private void volverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverActionPerformed
        RealizarPedido realizarPedido = new RealizarPedido(pedido);
        realizarPedido.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_volverActionPerformed

    private void buscarPorFechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarPorFechaActionPerformed

    }//GEN-LAST:event_buscarPorFechaActionPerformed

    private void buscarPorNumeroTelefofonoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarPorNumeroTelefofonoActionPerformed

    }//GEN-LAST:event_buscarPorNumeroTelefofonoActionPerformed

    private void buscarPorEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarPorEstadoActionPerformed

    }//GEN-LAST:event_buscarPorEstadoActionPerformed

    private void seleccionDePedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seleccionDePedidoActionPerformed
        int filaSeleccionadaBusqueda = tablaBusqueda.getSelectedRow();
        int filaSeleccionadaDia = tablaPedidosDia.getSelectedRow();

        if (filaSeleccionadaBusqueda == -1 && filaSeleccionadaDia == -1) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un pedido.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }
        try {
            PedidoDTO pedidoSeleccionado = null;
            int pedidoid = -1; // Inicializamos con un valor que indique que no se ha seleccionado

            if (filaSeleccionadaBusqueda != -1) {
                pedidoid = (int) tablaBusqueda.getValueAt(filaSeleccionadaBusqueda, 0);
            } else if (filaSeleccionadaDia != -1) {
                pedidoid = (int) tablaPedidosDia.getValueAt(filaSeleccionadaDia, 0);
            }
            if (pedidoid != -1) {
                // Fetch the order details using the ID
                pedidoSeleccionado = consultaPedido.obtenerPedidoPorIds(pedidoid);

                if (pedidoSeleccionado != null) {
                    // Llamar a la pantalla de consultar pedido con el DTO creado
                    ConsultaPedidos resumen = new ConsultaPedidos(pedido, pedidoSeleccionado,inicioSesion);
                    resumen.setVisible(true);
                    this.dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "No se encontró el pedido con ID: " + pedidoid, "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al consultar el pedido: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_seleccionDePedidoActionPerformed

    /**
     * @param args the command line arguments
     */
    /* public static void main(String args[]) {
        /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
 /*  try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConsultarPorFiltro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConsultarPorFiltro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConsultarPorFiltro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConsultarPorFiltro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
 /*    java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConsultarPorFiltro().setVisible(true);
            }
        });
    }*/

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> buscarPorEstado;
    private javax.swing.JTextField buscarPorFecha;
    private javax.swing.JTextField buscarPorNumeroTelefofono;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton seleccionDePedido;
    private javax.swing.JTable tablaBusqueda;
    private javax.swing.JTable tablaPedidosDia;
    private javax.swing.JButton volver;
    // End of variables declaration//GEN-END:variables

}
